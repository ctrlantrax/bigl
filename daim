struct ANIMAL* fun_create_array(int dim) {
	/*****************************************************
	Otrzymuje argument dim, zwraca alokowana dynamicznie
	tablice elementow typu ANIMAL o dlugosci dim. W przypadku
	bledu alokacji pamieci zwalnia pamiec przydzielona
	dynamicznie i konczy dzialanie programu.
	******************************************************/
	//TO DO
	struct ANIMAL* tab = (struct ANIMAL*)malloc(dim * sizeof(struct ANIMAL)); //alokowanie pamieci dla tablicy 
	if (!tab) { // sprawdzanie zaalokowania
		printf("ERROR blad przy alokacji pamieci\n");
		exit(1);
	}
	memset(tab, 0, dim * sizeof(struct ANIMAL)); //zerowanie tablicy
	return tab;
================================================================================
void fun_fill_array(struct ANIMAL* tab) {
	/*****************************************************
	Otrzymuje tablice tab elementow typu ANIMAL. Wypelnia
	jej elementy zgodnie z tym, co uzytkownik wprowadza z
	klawiatury do strumienia stdin.
	******************************************************/
	//TO DO
	size_t size = _msize(tab) / sizeof(struct ANIMAL); //rozmiar size dla tablicy tab 
	  
	//wpisujemy odpowiednio dane do tablicy gatunek mase ciala i mase mozgu
	for (int i = 0; i < size; i++) {
		printf("Wprowadz dane dla zwierzatka numer: %d:\n", i + 1);
		printf("Gatunek zwierzecia: ");
		scanf_s("%s", tab[i].species, 64);
		printf("Masa ciala: ");
		scanf_s("%f", &tab[i].mass);
		printf("Masa mozgu: ");
		scanf_s("%f", &tab[i].brain_mass);
================================================================================
struct ANIMAL* fun_insert(size_t num, struct ANIMAL* tab1, struct ANIMAL* tab2)
{
//TO DO
size_t size1 = _msize(tab1) / sizeof(struct ANIMAL);  //rozmiar size1 dla tablicy tab1 i to samo dla tablicy tab2
size_t size2 = _msize(tab2) / sizeof(struct ANIMAL);

if (num < 0 || num > size1) {
	printf("bledny zakres num\n");
	exit(1);
}
size_t size_new = num + size2 + (size1 - num); //zadeklarownie nowego rozmiaru size stworzonemu z size1 i size2 
struct ANIMAL* tab12 = (struct ANIMAL*)malloc(size_new * sizeof(struct ANIMAL)); //zaalokowanie pamieci dla nowej tablicy 12

if (!tab12) { // sprawdzanie zaalokowania
	printf("ERROR blad przy alokacji pamieci\n");
	exit(1);
}
memcpy(tab12, tab1, num * sizeof(struct ANIMAL)); //funkcja do skopiowania pamieci z tab1 do tab12 do indeksu num
memcpy(tab12 + num, tab2, size2 * sizeof(struct ANIMAL)); //funkcja do skopiowania pamieci z tab2 do tab12 po num 
memcpy(tab12 + num + size2, tab1 + num, (size1 - num) * sizeof(struct ANIMAL)); //dodanie reszty elementow z tab1 
return tab12;
